/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as DashboardIntegrationsRouteImport } from './routes/_dashboard/integrations'
import { Route as DashboardFRouteRouteImport } from './routes/_dashboard/f/route'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'
import { Route as DashboardFWorkflowIdRouteImport } from './routes/_dashboard/f/$workflowId'
import { ServerRoute as ApiChatServerRouteImport } from './routes/api/chat'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardIntegrationsRoute = DashboardIntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardFRouteRoute = DashboardFRouteRouteImport.update({
  id: '/f',
  path: '/f',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/(auth)/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardFWorkflowIdRoute = DashboardFWorkflowIdRouteImport.update({
  id: '/$workflowId',
  path: '/$workflowId',
  getParentRoute: () => DashboardFRouteRoute,
} as any)
const ApiChatServerRoute = ApiChatServerRouteImport.update({
  id: '/api/chat',
  path: '/api/chat',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/f': typeof DashboardFRouteRouteWithChildren
  '/integrations': typeof DashboardIntegrationsRoute
  '/': typeof DashboardIndexRoute
  '/f/$workflowId': typeof DashboardFWorkflowIdRoute
  '/login': typeof authLoginIndexRoute
}
export interface FileRoutesByTo {
  '/f': typeof DashboardFRouteRouteWithChildren
  '/integrations': typeof DashboardIntegrationsRoute
  '/': typeof DashboardIndexRoute
  '/f/$workflowId': typeof DashboardFWorkflowIdRoute
  '/login': typeof authLoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_dashboard/f': typeof DashboardFRouteRouteWithChildren
  '/_dashboard/integrations': typeof DashboardIntegrationsRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/f/$workflowId': typeof DashboardFWorkflowIdRoute
  '/(auth)/login/': typeof authLoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/f' | '/integrations' | '/' | '/f/$workflowId' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/f' | '/integrations' | '/' | '/f/$workflowId' | '/login'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_dashboard/f'
    | '/_dashboard/integrations'
    | '/_dashboard/'
    | '/_dashboard/f/$workflowId'
    | '/(auth)/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  authLoginIndexRoute: typeof authLoginIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/chat': typeof ApiChatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/chat': typeof ApiChatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/chat': typeof ApiChatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/chat' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/chat' | '/api/auth/$'
  id: '__root__' | '/api/chat' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiChatServerRoute: typeof ApiChatServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/integrations': {
      id: '/_dashboard/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof DashboardIntegrationsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/f': {
      id: '/_dashboard/f'
      path: '/f'
      fullPath: '/f'
      preLoaderRoute: typeof DashboardFRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/f/$workflowId': {
      id: '/_dashboard/f/$workflowId'
      path: '/$workflowId'
      fullPath: '/f/$workflowId'
      preLoaderRoute: typeof DashboardFWorkflowIdRouteImport
      parentRoute: typeof DashboardFRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/chat': {
      id: '/api/chat'
      path: '/api/chat'
      fullPath: '/api/chat'
      preLoaderRoute: typeof ApiChatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface DashboardFRouteRouteChildren {
  DashboardFWorkflowIdRoute: typeof DashboardFWorkflowIdRoute
}

const DashboardFRouteRouteChildren: DashboardFRouteRouteChildren = {
  DashboardFWorkflowIdRoute: DashboardFWorkflowIdRoute,
}

const DashboardFRouteRouteWithChildren = DashboardFRouteRoute._addFileChildren(
  DashboardFRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardFRouteRoute: typeof DashboardFRouteRouteWithChildren
  DashboardIntegrationsRoute: typeof DashboardIntegrationsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardFRouteRoute: DashboardFRouteRouteWithChildren,
  DashboardIntegrationsRoute: DashboardIntegrationsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  authLoginIndexRoute: authLoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiChatServerRoute: ApiChatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
